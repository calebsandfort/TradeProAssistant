<#@ template debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data.Entity.Design"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ include file="TemplateFileManager.ttinclude" #>
<#
	string entityMapContent = System.IO.File.ReadAllText(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\DataAccessStarterEntityMap.xml");
	XDocument entityMap = XDocument.Parse(entityMapContent);
	XNamespace entityMapNamespace = "http://www.codesmithtools.com/entitymap";
	var p = PluralizationService.CreateService(new CultureInfo("en-US"));

var manager = TemplateFileManager.Create(this);
string entityNamespace = entityMap.Element(entityMapNamespace + "EntityMap").Attribute("EntityNamespace").Value;

List<XElement> entities = entityMap.Descendants(entityMapNamespace + "Entity").ToList();
foreach(XElement entity in entities)
{
	string entityName = entity.Attribute("Name").Value;
		
	manager.StartNewFile(String.Format("{0}PropertyNames.cs", entityName),  null, String.Format("{0}.PropertyNames", entityNamespace));
#>
using System;

namespace <#= entityNamespace #>
{
	public class <#= entityName #>PropertyNames : PropertyNamesBase
	{
		public <#= entityName #>PropertyNames() : base(String.Empty) {}
		public <#= entityName #>PropertyNames(String parent) : base(parent) {}

		public String Identifier { get { return ResolvePropertyName("Identifier"); } }
<#
List<XElement> properties = entity.Descendants(entityMapNamespace + "Property").ToList();
foreach(XElement prop in properties)
{
#>
		public String <#= prop.Attribute("Name").Value #> { get { return ResolvePropertyName("<#= prop.Attribute("Name").Value #>"); } }
<#
}

List<XElement> relatedProperties = entity.Descendants(entityMapNamespace + "Relationship").ToList();

if(relatedProperties.Count > 0)
{
	foreach(XElement relatedProperty in relatedProperties)
	{
#>
		public String <#= relatedProperty.Attribute("Name").Value #>Identifier { get { return ResolvePropertyName("<#= relatedProperty.Attribute("Name").Value #>Identifier"); } }
		public String <#= relatedProperty.Attribute("Name").Value #>Include { get { return ResolvePropertyName("<#= relatedProperty.Attribute("Name").Value #>"); } }
		public <#= relatedProperty.Attribute("Type").Value #>PropertyNames <#= relatedProperty.Attribute("Name").Value #> { get { return new <#= relatedProperty.Attribute("Type").Value #>PropertyNames(ResolvePropertyName("<#= relatedProperty.Attribute("Name").Value #>")); } }
<#
    }
}


List<XElement> collectionProperties = entity.Descendants(entityMapNamespace + "CollectionProperty").ToList();

if(collectionProperties.Count > 0)
{
	foreach(XElement collectionProperty in collectionProperties)
	{
#>
		public String <#= collectionProperty.Attribute("Name").Value #>Include { get { return ResolvePropertyName("<#= collectionProperty.Attribute("Name").Value #>"); } }
		public <#= collectionProperty.Attribute("Type").Value #>PropertyNames <#= collectionProperty.Attribute("Name").Value #> { get { return new <#= collectionProperty.Attribute("Type").Value #>PropertyNames(ResolvePropertyName("<#= collectionProperty.Attribute("Name").Value #>")); } }
<#
    }
}
#>
	}
}
<#
}
manager.Process();
#>
