<#@ template debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data.Entity.Design"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ include file="TemplateFileManager.ttinclude" #>
<#
	string entityMapContent = System.IO.File.ReadAllText(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\DataAccessStarterEntityMap.xml");
	XDocument entityMap = XDocument.Parse(entityMapContent);
	XNamespace entityMapNamespace = "http://www.codesmithtools.com/entitymap";
	var p = PluralizationService.CreateService(new CultureInfo("en-US"));

var manager = TemplateFileManager.Create(this);
string enumNamespace = entityMap.Element(entityMapNamespace + "EntityMap").Attribute("EnumNamespace").Value;
string enumLocation = entityMap.Element(entityMapNamespace + "EntityMap").Attribute("EnumLocation").Value;

List<XElement> entityEnums = entityMap.Descendants(entityMapNamespace + "EntityEnum").ToList();
foreach(XElement entityEnum in entityEnums)
{
	string entityEnumName = entityEnum.Attribute("Name").Value;
		
	manager.StartNewFile(String.Format("{0}.cs", entityEnumName),  null, enumLocation);
#>
using System;
using Data.Framework;
namespace <#= enumNamespace #>
{
	public enum <#= entityEnumName #>
	{
		[StringValue("None")]
		None = 0,
<#
List<XElement> enumMembers = entityEnum.Descendants(entityMapNamespace + "EnumMember").ToList();
foreach(XElement enumMember in enumMembers)
{
	string enumMemberName = enumMember.Attribute("Name").Value;
	string enumMemberValue = enumMember.Attribute("Value").Value;
	string enumMemberDisplayValue = enumMember.Attribute("DisplayValue").Value;
#>
		[StringValue("<#= enumMemberDisplayValue #>")]
		<#= enumMemberName #> = <#= enumMemberValue #>,
<#
}
#>
	}

	public static class <#= entityEnumName #>Extensions
	{
		public static <#= entityEnumName #> To<#= p.Singularize(entityEnumName) #>(this String val)
		{
			<#= entityEnumName #> retVal = <#= entityEnumName #>.None;

			switch(val)
			{
<#			
foreach(XElement enumMember in enumMembers)
{
	string enumMemberName = enumMember.Attribute("Name").Value;
	string enumMemberValue = enumMember.Attribute("Value").Value;
	string enumMemberDisplayValue = enumMember.Attribute("DisplayValue").Value;
#>
				case "<#= enumMemberDisplayValue #>":
					retVal = <#= entityEnumName #>.<#= enumMemberName #>;
					break;
<#
}
#>
			}

			return retVal;
		}
	}
}
<#
}
manager.Process();
#>
