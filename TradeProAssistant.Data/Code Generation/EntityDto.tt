<#@ template debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data.Entity.Design"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ include file="TemplateFileManager.ttinclude" #>
<#
	string entityMapContent = System.IO.File.ReadAllText(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\DataAccessStarterEntityMap.xml");
	XDocument entityMap = XDocument.Parse(entityMapContent);
	XNamespace entityMapNamespace = "http://www.codesmithtools.com/entitymap";
	var p = PluralizationService.CreateService(new CultureInfo("en-US"));

var manager = TemplateFileManager.Create(this);
string entityNamespace = entityMap.Element(entityMapNamespace + "EntityMap").Attribute("EntityNamespace").Value;
string enumNamespace = entityMap.Element(entityMapNamespace + "EntityMap").Attribute("EnumNamespace").Value;

List<XElement> entities = entityMap.Descendants(entityMapNamespace + "Entity").ToList();
foreach(XElement entity in entities)
{
	string entityName = entity.Attribute("Name").Value;
		
	manager.StartNewFile(String.Format("{0}Dto.cs", entityName),  null, entityNamespace + ".Dtos");
#>
using System;
<# if(entity.Descendants(entityMapNamespace + "EnumProperty").Count() > 0) { #>
using <#= enumNamespace #>;
<# } #>

namespace <#= entityNamespace #>.Dtos
{
	public class <#= entityName #>Dto
	{
		public int Identifier { get; set; }
		public bool IsNew { get{ return this.Identifier == 0; } }
<#
List<XElement> properties = entity.Descendants(entityMapNamespace + "Property").ToList();
foreach(XElement prop in properties)
{
	XAttribute IncludeInDtoAttribute = prop.Attribute("IncludeInDto");
	if(IncludeInDtoAttribute != null && IncludeInDtoAttribute.Value == "true")
	{
#>
		public <#= prop.Attribute("Type").Value #> <#= prop.Attribute("Name").Value #> { get; set; }
<#
	}
}

List<XElement> enumProperties = entity.Descendants(entityMapNamespace + "EnumProperty").ToList();
foreach(XElement enumProp in enumProperties)
{
	XAttribute IncludeInDtoAttribute = enumProp.Attribute("IncludeInDto");
	if(IncludeInDtoAttribute != null && IncludeInDtoAttribute.Value == "true")
	{
#>

		public <#= enumProp.Attribute("Type").Value #> <#= enumProp.Attribute("Name").Value #> { get; set; }
<#
	}
}

List<XElement> relatedProperties = entity.Descendants(entityMapNamespace + "Relationship").ToList();

if(relatedProperties.Count > 0)
{
#>

<#
	foreach(XElement relatedProperty in relatedProperties)
	{
		XAttribute IncludeInDtoAttribute = relatedProperty.Attribute("IncludeInDto");
		if(IncludeInDtoAttribute != null && IncludeInDtoAttribute.Value == "true")
		{
#>
		public <#= relatedProperty.Attribute("Type").Value #>Dto <#= relatedProperty.Attribute("Name").Value #> { get; set; }
<#
		}
    }
}


List<XElement> collectionProperties = entity.Descendants(entityMapNamespace + "CollectionProperty").ToList();

if(collectionProperties.Count > 0)
{
#>

<#
	foreach(XElement collectionProperty in collectionProperties)
	{
		XAttribute IncludeInDtoAttribute = collectionProperty.Attribute("IncludeInDto");
		if(IncludeInDtoAttribute != null && IncludeInDtoAttribute.Value == "true")
		{
	#>
			public List<<#= collectionProperty.Attribute("Type").Value #>Dto> <#= collectionProperty.Attribute("Name").Value #> { get; set; }
	<#
		}
    }
}
#>

		#region Comparisons
		public static bool operator ==(<#= entityName #>Dto entity, object obj)
		{
			if ((object)entity == null && obj == null)
			{
				return true;
			}
			else if ((object)entity != null && obj is <#= entityName #>Dto && entity.GetType() == obj.GetType())
			{
				return (entity.Identifier == ((<#= entityName #>Dto)obj).Identifier);
			}
			else
			{
				return false;
			}
		}

		public static bool operator !=(<#= entityName #>Dto entity, object obj)
		{
			if ((object)entity == null && obj == null)
			{
				return false;
			}
			else if ((object)entity != null && obj is <#= entityName #>Dto && entity.GetType() == obj.GetType())
			{
				return (entity.Identifier != ((<#= entityName #>Dto)obj).Identifier);
			}
			else
			{
				return true;
			}
		}

		public override bool Equals(object obj)
		{
			if (obj is <#= entityName #>Dto && this.GetType() == obj.GetType())
			{
				return (this.Identifier == ((<#= entityName #>Dto)obj).Identifier);
			}
			else
			{
				return false;
			}
		}

		public override int GetHashCode()
		{
			return base.GetHashCode();
		}
		#endregion
	}
}
<#
}
manager.Process();
#>
