@(Html.Kendo().Grid<DayPerformanceModel>()
            .Name("pullbackDayPerformanceGrid")
            .Columns(columns =>
            {
                columns.Bound(x => x.Date).Format("{0:d}").Width(75);
                columns.Bound(x => x.Day).Width(75);
                columns.Bound(x => x.Wins).Width(75);
                columns.Bound(x => x.Losses).Width(75);
                columns.Bound(x => x.Trades).Width(75);
                columns.Bound(x => x.WinPtg).Width(75).Format("{0:p0}");
                columns.Bound(x => x.PPC).Width(75).Format("{0:c2}");
                columns.Bound(x => x.PnL).Width(75).Format("{0:c2}");
                //columns.Bound(x => x.Won).Width(75).ClientTemplate("#= Won ? 'Yes' : 'No' #");
                //columns.Bound(x => x.PnL).Width(75).Format("{0:c2}");
                //columns.Bound(x => x.Name).Width(175);
                //columns.Bound(x => x.NextEarningsDate).Format("{0:d}").Width(75).Title("Next Earnings");
                //columns.Bound(x => x.ExDividendDate).Format("{0:d}").Width(75).Title("Ex Dividend");
                //columns.Bound(x => x.Ignore).ClientTemplate("<input type='checkbox' #= Ignore ? \"checked='checked'\" : \"\" # class='ignoreCheckbox' data-identifier='#= Identifier #' />").Width(50);
                //columns.Bound(x => x.IsBullish).Title("Bull").ClientTemplate("<input type='checkbox' #= IsBullish ? \"checked='checked'\" : \"\" # class='isBullishCheckbox' data-identifier='#= Identifier #' />").Width(50);
                //columns.Bound(x => x.IsBearish).Title("Bear").ClientTemplate("<input type='checkbox' #= IsBearish ? \"checked='checked'\" : \"\" # class='isBearishCheckbox' data-identifier='#= Identifier #' />").Width(50);
                //columns.Bound(x => x.IronCondorEligible).Title("IC").ClientTemplate("<input type='checkbox' #= IronCondorEligible ? \"checked='checked'\" : \"\" # class='ironCondorEligibleCheckbox' data-identifier='#= Identifier #' />").Width(50);
                //columns.Bound(x => x.Support).ClientTemplate("<input type='text' class='supportTextbox' data-identifier='#= Identifier #' value='#= Support #' style='width: 90px;' />").Width(80);
                //columns.Bound(x => x.Resistance).ClientTemplate("<input type='text' class='resistanceTextbox' data-identifier='#= Identifier #' value='#= Resistance #' style='width: 90px;' />").Width(80);
                //columns.Command(command => command.Custom("Go").Click("updateSR")).Width(55);
                //columns.Bound(x => x.Total).Width(100).Format("{0:c2}");

            })
            //.HtmlAttributes(new { style = "height: 730px;" })
            .PersistSelection()
        .Sortable(sortable => sortable
            .AllowUnsort(false))
        .Pageable(pageable => pageable
            .Refresh(true)
            .ButtonCount(5))
        .Scrollable()
        .Filterable(filterable => filterable
            .Extra(false)
        //.Operators(operators => operators
        //.ForString(str => str.Clear()
        //    .IsEqualTo("Is")
        //))
        )
        .DataSource(dataSource => dataSource
            .Ajax()
            .Sort(sort => sort.Add(x => x.Date).Descending())
            .PageSize(50)
            .ServerOperation(false)
            .Read(read =>
            {
                read.Action("PullbackDayPerformance_Read", "TradeProStrategy");
            }
            )
        )
)


